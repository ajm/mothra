# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class NewickScanner(runtime.Scanner):
    patterns = [
        ('"\\\\)"', re.compile('\\)')),
        ('","', re.compile(',')),
        ('"\\\\("', re.compile('\\(')),
        ('":"', re.compile(':')),
        ('";"', re.compile(';')),
        (' \n\t', re.compile(' \n\t')),
        ('ID', re.compile('[-_\\.a-zA-Z0-9]+')),
        ('NUM', re.compile('\\-?[0-9]+\\.[0-9]+(e\\-?[0-9]+)?')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{' \n\t':None,},str,*args,**kw)

class Newick(runtime.Parser):
    Context = runtime.Context
    def newick(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'newick', [])
        tree = self.tree(_context)
        self._scan('";"', context=_context)
        return tree

    def tree(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'tree', [])
        _token = self._peek('ID', '"\\\\("', context=_context)
        if _token == 'ID':
            ID = self._scan('ID', context=_context)
            self._scan('":"', context=_context)
            NUM = self._scan('NUM', context=_context)
            return (ID, float(NUM))
        else: # == '"\\\\("'
            self._scan('"\\\\("', context=_context)
            result = [] ; distance = 0.0
            tree = self.tree(_context)
            self._scan('","', context=_context)
            result.append(tree)
            tree = self.tree(_context)
            self._scan('"\\\\)"', context=_context)
            result.append(tree)
            if self._peek('":"', '";"', '","', '"\\\\)"', context=_context) == '":"':
                self._scan('":"', context=_context)
                NUM = self._scan('NUM', context=_context)
            return (result, float(NUM if 'NUM' in locals() else 0.0))


def parse(rule, text):
    P = Newick(NewickScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
